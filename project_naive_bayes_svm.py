# -*- coding: utf-8 -*-
"""project naive bayes svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PFclg_2-FEhk_WcnvmNeRWdNvLl26Ton
"""

import pickle
import random
import numpy as np 
import pandas as pd 
import seaborn as sns 
import matplotlib.pyplot as plt 
from sklearn import linear_model
from imblearn.over_sampling import SMOTE
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, scale
from sklearn.metrics import classification_report, confusion_matrix
sns.set_style('whitegrid')

random.seed(123)

df = pd.read_csv('/heart.csv')

df.sample(5)

df.info()

# Checking for duplicates
duplicate_data = df[df.duplicated()]
duplicate_data

# Counting the number of duplicate values 
df.duplicated().sum()

# Data set length before removing duplicates
len(df)

# Removing duplicate data 
df.drop_duplicates(keep='first', inplace=True)

# Data set length after removing duplicates
len(df)

# double checking for duplicates 
duplicate_data = df[df.duplicated()]
duplicate_data

# Counting the number of duplicate values 
df.duplicated().sum()

(df.isnull().sum() * 100 / df.shape[0]).sort_values(ascending=False)

df.isnull().sum()

(df.isnull().sum() * 100 / df.shape[0]).sort_values(ascending=False)

# Data Visualisation to understand the heart disease data set
# How does the classes in the categorical features vary in numbers?

sex_cat = df['sex'].value_counts().rename_axis("Sex").reset_index(name='Count')
sex_cat = sex_cat.replace({'Sex': {0 : 'Female', 1: 'Male'}})
plt.bar(sex_cat.Sex, sex_cat.Count, color = 'maroon');
plt.title('Patients Sex');
plt.xlabel('Sex');
plt.ylabel('Number of patients');

cp_cat = df['cp'].value_counts().rename_axis("Cp").reset_index(name='Count')
cp_cat = cp_cat.replace({'Cp': {0 : 'Typical angina', 1: 'Atypical angina',
                                2: 'Non-anginal pain', 3: 'Asymptomatic'}})
plt.bar(cp_cat.Cp, cp_cat.Count, color = 'maroon');
plt.title('Patients Chest Pain type');
plt.xlabel('Chest pain type');
plt.ylabel('Number of patients');
plt.xticks(rotation=45);

fbs_cat = df['fbs'].value_counts().rename_axis("Fbs").reset_index(name='Count')
fbs_cat = fbs_cat.replace({'Fbs': {0 : 'No', 1: 'Yes'}})
plt.bar(fbs_cat.Fbs, fbs_cat.Count, color = 'maroon');
plt.title('Does the Patient have a fasting blood sugar > 120 mg/dl');
plt.xlabel('Answer');
plt.ylabel('Number of patients');

restecg_cat = df['restecg'].value_counts().rename_axis("Restecg").reset_index(name='Count')
restecg_cat = restecg_cat.replace({'Restecg': {0 : 'Normal', 1: 'Abnormal', 2: 'Ventricular hypertrophy'}})
plt.bar(restecg_cat.Restecg, restecg_cat.Count, color = 'maroon');
plt.title('Resting electrocardiographic results of Patients');
plt.xlabel('Results');
plt.ylabel('Number of patients');
plt.xticks(rotation=45);

exang_cat = df['exang'].value_counts().rename_axis("Exang").reset_index(name='Count')
exang_cat = exang_cat.replace({'Exang': {0 : 'No', 1: 'Yes'}})
plt.bar(exang_cat.Exang, exang_cat.Count, color = 'maroon');
plt.title('Does the Patient have Exercise Induced Angina');
plt.xlabel('Answer');
plt.ylabel('Number of patients');

slope_cat = df['slope'].value_counts().rename_axis("Slope").reset_index(name='Count')
slope_cat = slope_cat.replace({'Slope': {0 : 'Upsloping', 1: 'Flat', 2: 'Downsloping'}})
plt.bar(slope_cat.Slope, slope_cat.Count, color = 'maroon');
plt.title('The Slope of the Peak Exercise ST Segment of Patients');
plt.xlabel('Slope');
plt.ylabel('Number of patients');

ca_cat = df['ca'].value_counts().rename_axis("Ca").reset_index(name='Count')
ca_cat = ca_cat.replace({'Ca': {0 : 'Mild', 1: 'Moderate', 2: 'Mild Severe',
                               3: 'Moderate Severe', 4: 'Extreme Severe'}})
plt.bar(ca_cat.Ca, ca_cat.Count, color = 'maroon');
plt.title('Number of Major Vessels Colored by Fluoroscopy');
plt.xlabel('Coarctation of Aorta (Ca)');
plt.ylabel('Number of Patients');
plt.xticks(rotation=45);

thal_cat = df['thal'].value_counts().rename_axis("Thal").reset_index(name='Count')
thal_cat = thal_cat.replace({'Thal': {0 : 'Normal', 1: 'Fixed defect', 2: 'Reversible defect',
                               3: 'Extra Defect'}})
plt.bar(thal_cat.Thal, thal_cat.Count, color = 'maroon');
plt.title('Patients Heart Status');
plt.xlabel('Status');
plt.ylabel('Number of Patients');
plt.xticks(rotation=45);

target_cat = df['target'].value_counts().rename_axis("Target").reset_index(name='Count')
target_cat = target_cat.replace({'Target': {0 : 'No', 1: 'Yes'}})
plt.bar(target_cat.Target, target_cat.Count, color = 'maroon');
plt.title('Patients with Heart Disease');
plt.xlabel('Heart Disease');
plt.ylabel('Number of Patients');

# How are the numerical features distributed?

from scipy.stats import norm, skewnorm, halfcauchy

# Fit a normal distribution to the data to observe if it is normally distributed 
sns.distplot(df.age, rug=True, bins=15, fit=norm);
plt.title('Distribution of Patients Age');
plt.xlabel('Age');

sns.distplot(df.trestbps, rug=True, bins=15, fit=norm);
plt.title('Distribution of Resting Blood Pressure (in mm Hg)');
plt.xlabel('Blood Pressure (mm Hg)');

sns.distplot(df.chol, rug=True, bins=15, fit=norm);
plt.title('Distribution of Serum cholestoral in mg/dl');
plt.xlabel('Cholesterol (mg/dl)');

sns.distplot(df.thalach, rug=True, bins=15, fit=norm);
plt.title('Distribution of Maximum Heart Rate Achieved');
plt.xlabel('Maximum Heart Rate');

sns.distplot(df.oldpeak, rug=True, bins=15, fit=norm);
plt.title('Distribution of ST Depression Induced by Exercise Relative to Rest');
plt.xlabel('Old Peak');

# How does the classes in the categorical features vary in numbers according to the target feature?

# Make a copy of the original data as a precautionary measure to not modify the source data frame 
data_copy = df.copy()

# Encode categorical columns with categories for data visualisation understanding 
data_copy = data_copy.replace({'sex': {0 : 'Female', 1: 'Male'},
                              'cp': {0 : 'Typical angina', 1: 'Atypical angina',
                                     2: 'Non-anginal pain', 3: 'Asymptomatic'},
                              'fbs': {0 : 'No', 1: 'Yes'},
                              'restecg': {0 : 'Normal', 1: 'Abnormal', 2: 'Ventricular hypertrophy'},
                              'exang': {0 : 'No', 1: 'Yes'},
                              'slope': {0 : 'Upsloping', 1: 'Flat', 2: 'Downsloping'},
                              'ca': {0 : 'Mild', 1: 'Moderate', 2: 'Mild Severe',
                                     3: 'Moderate Severe', 4: 'Extreme Severe'},
                              'thal': {0 : 'Normal', 1: 'Fixed defect', 2: 'Reversible defect',
                                       3: 'Extra Defect'},
                              'target': {0 : 'No', 1: 'Yes'}})

data_copy.sample(10)

sex_cls = data_copy.groupby(['sex', 'target']).sex.count().reset_index(name='count')
sns.barplot(x="sex", y="count", data=sex_cls, hue = "target");
plt.title('Patients Sex');
plt.xlabel('Sex');
plt.ylabel('Number of patients');
plt.legend(title = "Heart Disease");

cp_cls = data_copy.groupby(['cp', 'target']).cp.count().reset_index(name='count')
sns.barplot(x="cp", y="count", data=cp_cls, hue = "target");
plt.title('Patients Chest Pain type');
plt.xlabel('Chest pain type');
plt.ylabel('Number of patients');
plt.xticks(rotation=45);
plt.legend(title = "Heart Disease");

fbs_cls = data_copy.groupby(['fbs', 'target']).fbs.count().reset_index(name='count')
sns.barplot(x="fbs", y="count", data=fbs_cls, hue = "target");
plt.title('Does the Patient have a fasting blood sugar > 120 mg/dl');
plt.xlabel('Answer');
plt.ylabel('Number of patients');
plt.legend(title = "Heart Disease");

restecg_cls = data_copy.groupby(['restecg', 'target']).restecg.count().reset_index(name='count')
sns.barplot(x="restecg", y="count", data=restecg_cls, hue = "target");
plt.title('Resting electrocardiographic results of Patients');
plt.xlabel('Results');
plt.ylabel('Number of patients');
plt.xticks(rotation=45);
plt.legend(title = "Heart Disease");

exang_cls = data_copy.groupby(['exang', 'target']).exang.count().reset_index(name='count')
sns.barplot(x="exang", y="count", data=exang_cls, hue = "target");
plt.title('Does the Patient have Exercise Induced Angina');
plt.xlabel('Answer');
plt.ylabel('Number of patients');
plt.legend(title = "Heart Disease");

slope_cls = data_copy.groupby(['slope', 'target']).slope.count().reset_index(name='count')
sns.barplot(x="slope", y="count", data=slope_cls, hue = "target");
plt.title('The Slope of the Peak Exercise ST Segment of Patients');
plt.xlabel('Slope');
plt.ylabel('Number of patients');
plt.legend(title = "Heart Disease");

ca_cls = data_copy.groupby(['ca', 'target']).ca.count().reset_index(name='count')
sns.barplot(x="ca", y="count", data=ca_cls, hue = "target");
plt.title('Number of Major Vessels Colored by Fluoroscopy');
plt.xlabel('Coarctation of Aorta (Ca)');
plt.ylabel('Number of Patients');
plt.xticks(rotation=45);
plt.legend(title = "Heart Disease");

thal_cls = data_copy.groupby(['thal', 'target']).thal.count().reset_index(name='count')
sns.barplot(x="thal", y="count", data=thal_cls, hue = "target");
plt.title('Patients Heart Status');
plt.xlabel('Status');
plt.ylabel('Number of Patients');
plt.xticks(rotation=45);
plt.legend(title = "Heart Disease");

# How are the numerical features distributed according to the target feature

sns.set_style('whitegrid') # grid to easily make sense of numbers in plots
cust_col = ["#1f77b4", "#ff7f0e"] # own custom color scheme 
sns.set_palette(cust_col) # set color scheme

age_mean = data_copy.groupby('target')['age'].mean() # calculate group mean
age_median = data_copy.groupby('target')['age'].median() # calculate group median 
age_order = data_copy.groupby('target')['age'].mean().iloc[::1].index # calculate mean for grouping according to mean
sns.violinplot(x='target', y='age', data=data_copy, inner=None, order=age_order);
plt.title('Distribution of Patients Age According to Heart Disease');
plt.xlabel('Heart Disease');
plt.ylabel('Age');
plt.scatter(x=range(len(age_mean)),y=age_mean,c="k", label = "Mean");
plt.scatter(x=range(len(age_median)),y=age_median, c="maroon", label = "Median");
plt.legend();

trestbps_mean = data_copy.groupby('target')['trestbps'].mean() 
trestbps_median = data_copy.groupby('target')['trestbps'].median() 
trestbps_order = data_copy.groupby('target')['trestbps'].mean().iloc[::1].index 
sns.violinplot(x='target', y='trestbps', data=data_copy, inner=None, order=trestbps_order);
plt.title('Distribution of Resting Blood Pressure (in mm Hg)');
plt.xlabel('Heart Disease');
plt.ylabel('Blood Pressure (mm Hg)');
plt.scatter(x=range(len(trestbps_mean)),y=trestbps_mean,c="k", label = "Mean");
plt.scatter(x=range(len(trestbps_median)),y=trestbps_median, c="maroon", label = "Median");
plt.legend();

chol_mean = data_copy.groupby('target')['chol'].mean() 
chol_median = data_copy.groupby('target')['chol'].median() 
chol_order = data_copy.groupby('target')['chol'].mean().iloc[::1].index 
sns.violinplot(x='target', y='chol', data=data_copy, inner=None, order=chol_order);
plt.title('Distribution of Serum cholestoral in mg/dl');
plt.xlabel('Heart Disease');
plt.ylabel('Cholesterol (mg/dl)');
plt.scatter(x=range(len(chol_mean)),y=chol_mean,c="k", label = "Mean");
plt.scatter(x=range(len(chol_median)),y=chol_median, c="maroon", label = "Median");
plt.legend();

thalach_mean = data_copy.groupby('target')['thalach'].mean() 
thalach_median = data_copy.groupby('target')['thalach'].median() 
thalach_order = data_copy.groupby('target')['thalach'].mean().iloc[::1].index 
sns.violinplot(x='target', y='thalach', data=data_copy, inner=None, order=thalach_order);
plt.title('Distribution of Maximum Heart Rate Achieved');
plt.xlabel('Heart Disease');
plt.ylabel('Maximum Heart Rate');
plt.scatter(x=range(len(thalach_mean)),y=thalach_mean,c="k", label = "Mean");
plt.scatter(x=range(len(thalach_median)),y=thalach_median, c="maroon", label = "Median");
plt.legend();

oldpeak_mean = data_copy.groupby('target')['oldpeak'].mean() 
oldpeak_median = data_copy.groupby('target')['oldpeak'].median() 
oldpeak_order = data_copy.groupby('target')['oldpeak'].mean().iloc[::1].index 
sns.violinplot(x='target', y='oldpeak', data=data_copy, inner=None, order=oldpeak_order);
plt.title('Distribution of ST Depression Induced by Exercise Relative to Rest');
plt.xlabel('Heart Disease');
plt.ylabel('Old Peak');
plt.scatter(x=range(len(oldpeak_mean)),y=oldpeak_mean,c="k", label = "Mean");
plt.scatter(x=range(len(oldpeak_median)),y=oldpeak_median, c="maroon", label = "Median");
plt.legend();

# Class Representation

cust_col = ["#1f77b4","#ff7f0e"] # own custom color scheme 
sns.set_palette(cust_col) # set color scheme
total = len(df)
plt.figure(figsize=(7,5))
g = sns.countplot(x='target', data=df)
g.set_ylabel('Count', fontsize=14)
for p in g.patches:
    height = p.get_height()
    g.text(p.get_x()+p.get_width()/2.,
            height + 1.5,
            '{:1.2f}%'.format(height/total*100),
            ha="center", fontsize=14, fontweight='bold')
plt.margins(y=0.1)
plt.title('Patients with Heart Disease');
plt.xlabel('Heart Disease');
plt.ylabel('Number of Patients');
plt.show()

# Feature Selection #Correlation Analysis

plt.figure(figsize=(13, 13))
corr = df.corr() 
mask = np.tri(*corr.shape).T 
sns.heatmap(corr.abs(), mask=mask, annot=True)
b, t = plt.ylim() 
b += 0.5 
t -= 0.5 
plt.ylim(b, t) 
plt.show()

#Naive Bayes

# copy data to avoid modifying original data
nb_data = df.copy()

#split dataset in features and target variable
X =  nb_data.loc[:, nb_data.columns != 'target']
y = nb_data.target # Target featur

X_t = scale(X)

from sklearn.naive_bayes import GaussianNB
nb_model = GaussianNB()
nb_model.fit(X_t,y)

print(classification_report(y, nb_model.predict(X_t)))

# SVM

# copy data to avoid modifying original data
svm_data = df.copy()

#split dataset in features and target variable
X = svm_data.loc[:, svm_data.columns != 'target']
y = svm_data.target # Target feature

X_t = scale(X)

from sklearn import svm
svm_model = svm.SVC(kernel='linear')
svm_model.fit(X_t,y)

print(classification_report(y, svm_model.predict(X_t)))

#Models with Train-Test Split

from sklearn.model_selection import train_test_split

#Support Vector Machine (Train-Test Split)

# copy data to avoid modifying original data
svm2_data = df.copy()

#split dataset in features and target variable
X = svm2_data.loc[:, svm2_data.columns != 'target']
y = svm2_data.target

X_t = scale(X)

# 80% Training and 20% Testing 
X_train, X_test, y_train, y_test = train_test_split(X_t, y, test_size=0.2,random_state=109)

svm2_model = svm.SVC(kernel='linear')
svm2_model.fit(X_train,y_train)

#Support Vector Machine Accuracy on Train data

print(classification_report(y_train, svm2_model.predict(X_train)))

print(classification_report(y_test, svm2_model.predict(X_test)))